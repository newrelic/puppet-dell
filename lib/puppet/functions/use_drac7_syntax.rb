# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#   Summarise what the function does here
#
Puppet::Functions.create_function(:'use_drac7_syntax') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    Puppet::Parser::Functions.autoloader.loadall

    idrac_firmware_version = lookupvar('idrac_firmware_version')
    idrac_major_version    = lookupvar('idrac_major_version')

    if [idrac_firmware_version, idrac_major_version].include?(:undefined)
      function_warning(["Called use_drac7_syntax(), but no idrac facts were found."])
    elsif idrac_major_version.to_i >= 7 and function_versioncmp([idrac_firmware_version, '1.30.0']) >= 0
      true
    elsif idrac_major_version.to_i < 7 or function_versioncmp([idrac_firmware_version, '1.30.0']) < 0
      false
    else
      function_warning(["Failed to determine idrac version successfully. idrac_major_version was #{idrac_major_version}, idrac_firmware_version was #{idrac_firmware_version}"])
    end
  
  end
end
